import { Telegraf, Context } from 'telegraf';

export class MessageCleaner {
  private bot: Telegraf<Context>;
  private technicalMessagePatterns: RegExp[];

  constructor(bot: Telegraf<Context>) {
    this.bot = bot;
    
    // –®–∞–±–ª–æ–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.technicalMessagePatterns = [
      /–∑–∞–∫—Ä–µ–ø–∏–ª.*—Å–æ–æ–±—â–µ–Ω–∏–µ/i,
      /pinned.*message/i,
      /–æ—Ç–∫—Ä–µ–ø–∏–ª.*—Å–æ–æ–±—â–µ–Ω–∏–µ/i,
      /unpinned.*message/i,
      /–∏–∑–º–µ–Ω–∏–ª.*–Ω–∞–∑–≤–∞–Ω–∏–µ/i,
      /changed.*title/i,
      /–¥–æ–±–∞–≤–∏–ª.*—É—á–∞—Å—Ç–Ω–∏–∫/i,
      /added.*member/i,
      /–∏—Å–∫–ª—é—á–∏–ª.*—É—á–∞—Å—Ç–Ω–∏–∫/i,
      /removed.*member/i,
      /–ø–æ–∫–∏–Ω—É–ª.*–≥—Ä—É–ø–ø—É/i,
      /left.*group/i,
      /–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.*–≥—Ä—É–ø–ø–µ/i,
      /joined.*group/i
    ];
  }

  public async handleMessage(ctx: Context): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!this.isServiceMessage(ctx)) {
        return;
      }

      const messageText = this.getMessageText(ctx);
      if (!messageText) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º
      if (this.isTechnicalMessage(messageText)) {
        await this.deleteMessage(ctx);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ MessageCleaner:', error);
    }
  }

  private isServiceMessage(ctx: Context): boolean {
    const message = ctx.message;
    if (!message) return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    return !!(
      'pinned_message' in message ||
      'new_chat_members' in message ||
      'left_chat_member' in message ||
      'new_chat_title' in message ||
      'new_chat_photo' in message ||
      'delete_chat_photo' in message ||
      'group_chat_created' in message ||
      'supergroup_chat_created' in message ||
      'channel_chat_created' in message ||
      'migrate_to_chat_id' in message ||
      'migrate_from_chat_id' in message
    );
  }

  private getMessageText(ctx: Context): string | null {
    const message = ctx.message;
    if (!message) return null;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    if ('text' in message) {
      return message.text;
    }

    if ('caption' in message) {
      return message.caption || null;
    }

    // –î–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
    if ('pinned_message' in message) {
      return '–∑–∞–∫—Ä–µ–ø–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ';
    }

    if ('new_chat_members' in message) {
      return '–¥–æ–±–∞–≤–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞';
    }

    if ('left_chat_member' in message) {
      return '–ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É';
    }

    if ('new_chat_title' in message) {
      return '–∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ';
    }

    return null;
  }

  private isTechnicalMessage(text: string): boolean {
    return this.technicalMessagePatterns.some(pattern => pattern.test(text));
  }

  private async deleteMessage(ctx: Context): Promise<void> {
    try {
      const chatId = ctx.chat?.id;
      const messageId = ctx.message?.message_id;

      if (!chatId || !messageId) {
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      setTimeout(async () => {
        try {
          await this.bot.telegram.deleteMessage(chatId, messageId);
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –≤ —á–∞—Ç–µ ${chatId}`);
        } catch (deleteError) {
          console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}:`, deleteError);
        }
      }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  public async cleanupPinnedMessages(chatId: number, excludeMessageId?: number): Promise<void> {
    try {
      // Telegram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      // –ü–æ—ç—Ç–æ–º—É –º—ã –º–æ–∂–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –Ω—É–∂–Ω–æ–µ
      
      // –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      await this.bot.telegram.unpinAllChatMessages(chatId);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ
      if (excludeMessageId) {
        await this.bot.telegram.pinChatMessage(chatId, excludeMessageId, {
          disable_notification: true
        });
      }

      console.log(`üßπ –û—á–∏—â–µ–Ω—ã –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ ${chatId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ ${chatId}:`, error);
    }
  }
}
