import { Telegraf, Context } from 'telegraf';
import { Database, GroupConfig } from './database';

export class PollScheduler {
  private bot: Telegraf<Context>;
  private database: Database;
  private pollOptions: string[];

  constructor(bot: Telegraf<Context>, database: Database) {
    this.bot = bot;
    this.database = database;
    this.pollOptions = (process.env.POLL_OPTIONS || '–Ø –ø—Ä–∏–¥—É,–ú–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç,–Ø –¥—É–º–∞—é,–Ø –æ–ø–∞–∑–¥–∞—é').split(',');
  }

  public async sendScheduledPolls(): Promise<void> {
    try {
      const today = new Date();
      const dayOfWeek = today.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫...
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –æ–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
      const pollsToSend: Array<{type: 'city' | 'classic', title: string}> = [];
      
      // –ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (1), –°—Ä–µ–¥–∞ (3), –ü—è—Ç–Ω–∏—Ü–∞ (5)
      if ([1, 3, 5].includes(dayOfWeek)) {
        pollsToSend.push({
          type: 'city',
          title: process.env.CITY_POLL_QUESTION || '–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è'
        });
      }
      
      // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è: –í—Ç–æ—Ä–Ω–∏–∫ (2), –ß–µ—Ç–≤–µ—Ä–≥ (4), –°—É–±–±–æ—Ç–∞ (6)
      if ([2, 4, 6].includes(dayOfWeek)) {
        pollsToSend.push({
          type: 'classic',
          title: process.env.CLASSIC_POLL_QUESTION || '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è'
        });
      }

      console.log(`üìã –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ ${today.toLocaleDateString()}: ${pollsToSend.map(p => p.title).join(', ')}`);

      for (const pollInfo of pollsToSend) {
        await this.sendPollByType(pollInfo.type, pollInfo.title);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤:', error);
    }
  }

  private async sendPollByType(pollType: 'city' | 'classic', title: string): Promise<void> {
    try {
      let chatId: number;
      let threadId: number | undefined;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø—Ä–æ—Å
      if (pollType === 'city') {
        chatId = parseInt(process.env.CITY_GROUP_ID || '0');
        threadId = process.env.CITY_TOPIC_ID ? parseInt(process.env.CITY_TOPIC_ID) : undefined;
      } else {
        chatId = parseInt(process.env.CLASSIC_GROUP_ID || '0');
        threadId = undefined;
      }

      if (!chatId) {
        console.error(`‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–∏–ø–∞ ${pollType}`);
        return;
      }

      await this.sendPoll(chatId, pollType, title, threadId);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ ${pollType}:`, error);
    }
  }

  public async sendPoll(chatId: number, pollType: 'city' | 'classic', title: string, threadId?: number): Promise<void> {
    try {
      const today = new Date();
      const pollTitle = this.generatePollTitle(title, today);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å
      const pollMessage = await this.bot.telegram.sendPoll(
        chatId,
        pollTitle,
        this.pollOptions,
        {
          is_anonymous: false,
          allows_multiple_answers: false,
          message_thread_id: threadId,
          reply_markup: undefined
        }
      );

      // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ä–æ—Å–æ–º –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò
      try {
        await this.bot.telegram.pinChatMessage(chatId, pollMessage.message_id, {
          disable_notification: false // –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        });
        console.log(`üìå –û–ø—Ä–æ—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –≤ –≥—Ä—É–ø–ø–µ ${chatId} —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏`);

        // –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
          try {
            // –ü—Ä–æ—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –±–µ–∑ webhook'–æ–≤, –ø–æ—ç—Ç–æ–º—É –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ MessageCleaner
            console.log('üßπ –û–∂–∏–¥–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
          } catch (deleteError) {
            console.log('üîç MessageCleaner –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
          }
        }, 3000);

      } catch (pinError) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–µ ${chatId}:`, pinError);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–ø—Ä–æ—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const groupConfig = await this.database.getGroupConfig(chatId);
      if (groupConfig) {
        await this.database.savePoll(
          groupConfig.id,
          pollMessage.message_id,
          pollType,
          today.toISOString().split('T')[0]
        );
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞ –≤ –≥—Ä—É–ø–ø—É ${chatId}:`, error);
      throw error;
    }
  }

  private generatePollTitle(pollTitle: string, date: Date): string {
    const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    const dayName = days[date.getDay()];
    
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    
    return `${pollTitle} ${dayName} | ${day}/${month}`;
  }

  public async unpinLastPoll(chatId: number): Promise<void> {
    try {
      // –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
      await this.bot.telegram.unpinAllChatMessages(chatId);
      console.log(`üìå –û—Ç–∫—Ä–µ–ø–∏–ª–∏ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ ${chatId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:`, error);
    }
  }
}
