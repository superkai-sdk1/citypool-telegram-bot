"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReminderService = void 0;
class ReminderService {
    constructor(bot, database) {
        this.bot = bot;
        this.database = database;
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 19:00)
        const endTime = process.env.REMINDER_END_TIME || '19:00';
        this.reminderEndHour = parseInt(endTime.split(':')[0]);
    }
    async checkAndSendReminders() {
        try {
            const currentHour = new Date().getHours();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if (currentHour >= this.reminderEndHour) {
                console.log(`‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å (${this.reminderEndHour}:00)`);
                return;
            }
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            const today = new Date().toISOString().split('T')[0];
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±–µ–∏—Ö –≥—Ä—É–ø–ø
            await this.processRemindersForGroup('city');
            await this.processRemindersForGroup('classic');
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
        }
    }
    async processRemindersForGroup(groupType) {
        try {
            let chatId;
            let threadId;
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã
            if (groupType === 'city') {
                chatId = parseInt(process.env.CITY_GROUP_ID || '0');
                threadId = process.env.CITY_TOPIC_ID ? parseInt(process.env.CITY_TOPIC_ID) : undefined;
            }
            else {
                chatId = parseInt(process.env.CLASSIC_GROUP_ID || '0');
                threadId = undefined;
            }
            if (!chatId)
                return;
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã
            const groupConfig = await this.database.getGroupConfig(chatId);
            if (!groupConfig)
                return;
            // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ–ø—Ä–æ—Å
            const todaysPoll = await this.database.getTodaysPoll(groupConfig.id, groupType);
            if (!todaysPoll)
                return;
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –æ—Ç–º–µ—Ç–∏–ª—Å—è –∫–∞–∫ "–Ø –¥—É–º–∞—é"
            const thinkingVoters = await this.database.getThinkingVoters(todaysPoll.id);
            if (thinkingVoters.length === 0) {
                console.log(`‚ÑπÔ∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ "–Ø –¥—É–º–∞—é" –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupType}`);
                return;
            }
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, –∫–æ–º—É –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Å—É
            const votersToRemind = thinkingVoters.filter(voter => {
                if (!voter.lastReminderAt)
                    return true;
                const lastReminder = new Date(voter.lastReminderAt);
                const currentTime = new Date();
                const timeDiff = currentTime.getTime() - lastReminder.getTime();
                const hoursDiff = timeDiff / (1000 * 60 * 60);
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª —á–∞—Å –∏–ª–∏ –±–æ–ª—å—à–µ
                return hoursDiff >= 1;
            });
            if (votersToRemind.length === 0) {
                console.log(`‚ÑπÔ∏è –í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã ${groupType} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Å—É`);
                return;
            }
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await this.sendGroupReminder(chatId, threadId, votersToRemind, groupType);
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            for (const voter of votersToRemind) {
                await this.database.updateLastReminder(voter.id);
            }
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã ${groupType}:`, error);
        }
    }
    async sendGroupReminder(chatId, threadId, voters, groupType) {
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            const mentions = voters.map(voter => {
                if (voter.username) {
                    return `@${voter.username}`;
                }
                else {
                    // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ username –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
                    const displayName = `${voter.firstName || '–£—á–∞—Å—Ç–Ω–∏–∫'}${voter.lastName ? ` ${voter.lastName}` : ''}`;
                    return `[${displayName}](tg://user?id=${voter.userId})`;
                }
            }).join(', ');
            const pollName = groupType === 'city' ? '–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è' : '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è';
            const groupName = groupType === 'city' ? 'TITAN | City' : 'TITAN | Classic';
            const reminderText = `ü§î ${mentions}\n\n–ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ –æ–ø—Ä–æ—Å—É "${pollName}" –≤ ${groupName}!\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "–Ø –¥—É–º–∞—é"`;
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
            await this.bot.telegram.sendMessage(chatId, reminderText, {
                message_thread_id: threadId,
                parse_mode: 'Markdown'
            });
            console.log(`üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ${voters.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ ${groupName} (${groupType})`);
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å Markdown, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try {
                const mentions = voters.map(voter => {
                    if (voter.username) {
                        return `@${voter.username}`;
                    }
                    else {
                        return `${voter.firstName || '–£—á–∞—Å—Ç–Ω–∏–∫'}${voter.lastName ? ` ${voter.lastName}` : ''}`;
                    }
                }).join(', ');
                const pollName = groupType === 'city' ? '–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è' : '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è';
                const reminderText = `ü§î ${mentions}\n\n–ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ –æ–ø—Ä–æ—Å—É "${pollName}"!\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: "–Ø –¥—É–º–∞—é"`;
                await this.bot.telegram.sendMessage(chatId, reminderText, {
                    message_thread_id: threadId
                });
                console.log(`üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è) –¥–ª—è ${voters.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ ${groupType}`);
            }
            catch (secondError) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', secondError);
            }
        }
    }
}
exports.ReminderService = ReminderService;
//# sourceMappingURL=reminderService.js.map