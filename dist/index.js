"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = __importDefault(require("dotenv"));
const telegraf_1 = require("telegraf");
const cron = __importStar(require("node-cron"));
const http = __importStar(require("http"));
const database_1 = require("./database");
const pollScheduler_1 = require("./pollScheduler");
const messageCleaner_1 = require("./messageCleaner");
const reminderService_1 = require("./reminderService");
const keepAliveService_1 = require("./keepAliveService");
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv_1.default.config();
class CityPoolBot {
    constructor() {
        const botToken = process.env.BOT_TOKEN;
        if (!botToken) {
            throw new Error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }
        this.bot = new telegraf_1.Telegraf(botToken);
        this.database = new database_1.Database();
        this.pollScheduler = new pollScheduler_1.PollScheduler(this.bot, this.database);
        this.messageCleaner = new messageCleaner_1.MessageCleaner(this.bot);
        this.reminderService = new reminderService_1.ReminderService(this.bot, this.database);
        this.keepAliveService = new keepAliveService_1.KeepAliveService();
        this.setupMiddleware();
        this.setupCommands();
        this.setupMessageHandlers();
        this.setupScheduler();
        this.setupHealthCheck();
    }
    setupMiddleware() {
        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        this.bot.use((ctx, next) => {
            ctx.database = this.database;
            return next();
        });
    }
    setupCommands() {
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
        this.bot.command('init', async (ctx) => {
            try {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                const cityGroupId = parseInt(process.env.CITY_GROUP_ID || '0');
                const classicGroupId = parseInt(process.env.CLASSIC_GROUP_ID || '0');
                const cityTopicId = process.env.CITY_TOPIC_ID ? parseInt(process.env.CITY_TOPIC_ID) : undefined;
                if (cityGroupId) {
                    await this.database.saveGroupConfig(cityGroupId, 'city', cityTopicId);
                    console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ City –≥—Ä—É–ø–ø–∞: ${cityGroupId}`);
                }
                if (classicGroupId) {
                    await this.database.saveGroupConfig(classicGroupId, 'classic');
                    console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ Classic –≥—Ä—É–ø–ø–∞: ${classicGroupId}`);
                }
                await ctx.reply('‚úÖ –ì—Ä—É–ø–ø—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
            }
        });
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        this.bot.command('info', async (ctx) => {
            try {
                const cityGroupId = parseInt(process.env.CITY_GROUP_ID || '0');
                const classicGroupId = parseInt(process.env.CLASSIC_GROUP_ID || '0');
                const cityTopicId = process.env.CITY_TOPIC_ID;
                let infoText = `‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n`;
                infoText += `üèôÔ∏è TITAN | City: ${cityGroupId}${cityTopicId ? ` (—Ç–æ–ø–∏–∫: ${cityTopicId})` : ''}\n`;
                infoText += `‚öΩ TITAN | Classic: ${classicGroupId}\n\n`;
                infoText += `‚è∞ –í—Ä–µ–º—è –æ–ø—Ä–æ—Å–æ–≤: ${process.env.POLL_TIME || '01:00'}\n`;
                infoText += `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${process.env.TIMEZONE || 'Europe/Moscow'}\n\n`;
                infoText += `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n`;
                infoText += `‚Ä¢ –ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è: –ü–ù, –°–†, –ü–¢\n`;
                infoText += `‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è: –í–¢, –ß–¢, –°–ë\n\n`;
                infoText += `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ: ${process.env.REMINDER_END_TIME || '19:00'}`;
                await ctx.reply(infoText);
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
            }
        });
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤
        this.bot.command('testcity', async (ctx) => {
            try {
                const userId = ctx.from?.id;
                if (!userId)
                    return;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ env)
                const cityGroupId = parseInt(process.env.CITY_GROUP_ID || '0');
                const cityTopicId = process.env.CITY_TOPIC_ID ? parseInt(process.env.CITY_TOPIC_ID) : undefined;
                if (cityGroupId) {
                    await this.pollScheduler.sendPoll(cityGroupId, 'city', '–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è (–¢–ï–°–¢)', cityTopicId);
                    await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å "–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                }
                else {
                    await ctx.reply('‚ùå City –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
                }
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞:', error);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞');
            }
        });
        this.bot.command('testclassic', async (ctx) => {
            try {
                const userId = ctx.from?.id;
                if (!userId)
                    return;
                const classicGroupId = parseInt(process.env.CLASSIC_GROUP_ID || '0');
                if (classicGroupId) {
                    await this.pollScheduler.sendPoll(classicGroupId, 'classic', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è (–¢–ï–°–¢)');
                    await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ–ø—Ä–æ—Å "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                }
                else {
                    await ctx.reply('‚ùå Classic –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
                }
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞:', error);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞');
            }
        });
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞
        this.bot.command('renewpoll', async (ctx) => {
            try {
                const chatId = ctx.chat?.id;
                if (!chatId)
                    return;
                const today = new Date();
                const dayOfWeek = today.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫...
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä—É–ø–ø—ã –∏ –∫–∞–∫–æ–π –æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è
                const cityGroupId = parseInt(process.env.CITY_GROUP_ID || '0');
                const classicGroupId = parseInt(process.env.CLASSIC_GROUP_ID || '0');
                let pollType = null;
                let pollTitle = '';
                let targetChatId = chatId;
                let threadId;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –∏ —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è
                if (chatId === cityGroupId) {
                    // –ö–æ–º–∞–Ω–¥–∞ –∏–∑ City –≥—Ä—É–ø–ø—ã
                    if ([1, 3, 5].includes(dayOfWeek)) { // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –°—Ä–µ–¥–∞, –ü—è—Ç–Ω–∏—Ü–∞
                        pollType = 'city';
                        pollTitle = '–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è';
                        threadId = process.env.CITY_TOPIC_ID ? parseInt(process.env.CITY_TOPIC_ID) : undefined;
                    }
                }
                else if (chatId === classicGroupId) {
                    // –ö–æ–º–∞–Ω–¥–∞ –∏–∑ Classic –≥—Ä—É–ø–ø—ã
                    if ([2, 4, 6].includes(dayOfWeek)) { // –í—Ç–æ—Ä–Ω–∏–∫, –ß–µ—Ç–≤–µ—Ä–≥, –°—É–±–±–æ—Ç–∞
                        pollType = 'classic';
                        pollTitle = '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è';
                    }
                }
                if (!pollType) {
                    // –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ–ø—Ä–æ—Å–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                    const days = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞'];
                    const todayName = days[dayOfWeek];
                    let nextPollInfo = '';
                    if (chatId === cityGroupId) {
                        nextPollInfo = '–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º, —Å—Ä–µ–¥–∞–º –∏ –ø—è—Ç–Ω–∏—Ü–∞–º';
                    }
                    else if (chatId === classicGroupId) {
                        nextPollInfo = '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞–º, —á–µ—Ç–≤–µ—Ä–≥–∞–º –∏ —Å—É–±–±–æ—Ç–∞–º';
                    }
                    else {
                        nextPollInfo = '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –∏–≥—Ä–æ–≤—ã—Ö –≥—Ä—É–ø–ø–∞—Ö';
                    }
                    await ctx.reply(`‚ÑπÔ∏è –°–µ–≥–æ–¥–Ω—è (${todayName}) –Ω–µ—Ç –∏–≥—Ä–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞.\n\n` +
                        `${nextPollInfo}.\n\n` +
                        `‚è∞ –ñ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å –∑–∞–≤—Ç—Ä–∞!`, { message_thread_id: threadId });
                    return;
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                const groupConfig = await this.database.getGroupConfig(targetChatId);
                if (!groupConfig) {
                    await ctx.reply('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /init');
                    return;
                }
                const todaysPoll = await this.database.getTodaysPoll(groupConfig.id, pollType);
                if (todaysPoll) {
                    // –û–ø—Ä–æ—Å —É–∂–µ –µ—Å—Ç—å, –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    await this.pollScheduler.sendPoll(targetChatId, pollType, `${pollTitle} (–ü–û–í–¢–û–†)`, threadId);
                    await ctx.reply(`‚úÖ –û–ø—Ä–æ—Å "${pollTitle}" –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!`, { message_thread_id: threadId });
                }
                else {
                    // –û–ø—Ä–æ—Å–∞ –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    await this.pollScheduler.sendPoll(targetChatId, pollType, pollTitle, threadId);
                    await ctx.reply(`‚úÖ –û–ø—Ä–æ—Å "${pollTitle}" —Å–æ–∑–¥–∞–Ω!`, { message_thread_id: threadId });
                }
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞');
            }
        });
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        this.bot.command('schedule', async (ctx) => {
            try {
                const today = new Date();
                const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
                const currentDay = days[today.getDay()];
                const dayOfWeek = today.getDay();
                let scheduleText = `üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ CityPool Bot**\n\n`;
                scheduleText += `üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–æ–≤: **${process.env.POLL_TIME || '01:00'} ${process.env.TIMEZONE || 'Europe/Moscow'}**\n\n`;
                // –ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è
                scheduleText += `üèôÔ∏è **–ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è** (TITAN | City, —Ç–æ–ø–∏–∫ "–°–±–æ—Ä—ã"):\n`;
                scheduleText += `‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ${[1].includes(dayOfWeek) ? '‚Üê –°–ï–ì–û–î–ù–Ø' : ''}\n`;
                scheduleText += `‚Ä¢ –°—Ä–µ–¥–∞ ${[3].includes(dayOfWeek) ? '‚Üê –°–ï–ì–û–î–ù–Ø' : ''}\n`;
                scheduleText += `‚Ä¢ –ü—è—Ç–Ω–∏—Ü–∞ ${[5].includes(dayOfWeek) ? '‚Üê –°–ï–ì–û–î–ù–Ø' : ''}\n\n`;
                // –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è
                scheduleText += `‚öΩ **–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è** (TITAN | Classic):\n`;
                scheduleText += `‚Ä¢ –í—Ç–æ—Ä–Ω–∏–∫ ${[2].includes(dayOfWeek) ? '‚Üê –°–ï–ì–û–î–ù–Ø' : ''}\n`;
                scheduleText += `‚Ä¢ –ß–µ—Ç–≤–µ—Ä–≥ ${[4].includes(dayOfWeek) ? '‚Üê –°–ï–ì–û–î–ù–Ø' : ''}\n`;
                scheduleText += `‚Ä¢ –°—É–±–±–æ—Ç–∞ ${[6].includes(dayOfWeek) ? '‚Üê –°–ï–ì–û–î–ù–Ø' : ''}\n\n`;
                scheduleText += `üìç –°–µ–≥–æ–¥–Ω—è **${currentDay}** (–¥–µ–Ω—å ${dayOfWeek}):\n`;
                if ([1, 3, 5].includes(dayOfWeek)) {
                    scheduleText += `‚úÖ –ì–æ—Ä–æ–¥—Å–∫–∞—è –º–∞—Ñ–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ 01:00`;
                }
                else if ([2, 4, 6].includes(dayOfWeek)) {
                    scheduleText += `‚úÖ –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞—Ñ–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ 01:00`;
                }
                else {
                    scheduleText += `‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ–ø—Ä–æ—Å–æ–≤`;
                }
                scheduleText += `\n\nüîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: 9:00-19:00 –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–Ø –¥—É–º–∞—é"`;
                await ctx.reply(scheduleText, { parse_mode: 'Markdown' });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
            }
        });
        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)
        this.bot.command('debug', async (ctx) => {
            try {
                const cityGroupId = process.env.CITY_GROUP_ID;
                const cityTopicId = process.env.CITY_TOPIC_ID;
                const classicGroupId = process.env.CLASSIC_GROUP_ID;
                const botToken = process.env.BOT_TOKEN;
                const pollTime = process.env.POLL_TIME;
                const timezone = process.env.TIMEZONE;
                let debugText = `üîß **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:**\n\n`;
                debugText += `ü§ñ BOT_TOKEN: ${botToken ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}\n`;
                debugText += `üèôÔ∏è CITY_GROUP_ID: ${cityGroupId || '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}\n`;
                debugText += `üìç CITY_TOPIC_ID: ${cityTopicId || '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}\n`;
                debugText += `‚öΩ CLASSIC_GROUP_ID: ${classicGroupId || '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}\n`;
                debugText += `üïê POLL_TIME: ${pollTime || '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (01:00)'}\n`;
                debugText += `üåç TIMEZONE: ${timezone || '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (Europe/Moscow)'}\n\n`;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                const now = new Date();
                const moscowTime = new Date(now.toLocaleString("en-US", { timeZone: "Europe/Moscow" }));
                debugText += `‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: ${moscowTime.toLocaleTimeString()}\n`;
                debugText += `üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${moscowTime.toLocaleDateString()}\n`;
                debugText += `üìç –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ${moscowTime.getDay()} (0=–í—Å, 1=–ü–Ω, ..., 6=–°–±)\n\n`;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                try {
                    const groups = await this.database.getAllActiveGroups();
                    debugText += `üíæ –ì—Ä—É–ø–ø –≤ –ë–î: ${groups.length}\n`;
                    groups.forEach((group) => {
                        debugText += `  ‚Ä¢ ${group.groupType}: ${group.chatId}${group.threadId ? ` (—Ç–æ–ø–∏–∫: ${group.threadId})` : ''}\n`;
                    });
                }
                catch (dbError) {
                    debugText += `üíæ –ë–î: ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n`;
                }
                await ctx.reply(debugText, { parse_mode: 'Markdown' });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ');
            }
        });
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø (—É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        this.bot.command('getid', async (ctx) => {
            try {
                const chatId = ctx.chat?.id;
                const threadId = ctx.message?.message_thread_id;
                const chatType = ctx.chat?.type;
                const chatTitle = 'title' in (ctx.chat || {}) ? ctx.chat.title : '–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
                let idInfo = `üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**\n\n`;
                idInfo += `üìç Chat ID: \`${chatId}\`\n`;
                idInfo += `üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${chatTitle}\n`;
                idInfo += `üè∑Ô∏è –¢–∏–ø: ${chatType}\n`;
                if (threadId) {
                    idInfo += `üßµ Topic ID: \`${threadId}\`\n`;
                }
                idInfo += `\nüí° **–î–ª—è .env —Ñ–∞–π–ª–∞:**\n`;
                if (chatTitle.includes('City') || chatTitle.includes('–ì–æ—Ä–æ–¥')) {
                    idInfo += `\`CITY_GROUP_ID=${chatId}\`\n`;
                    if (threadId) {
                        idInfo += `\`CITY_TOPIC_ID=${threadId}\`\n`;
                    }
                }
                else if (chatTitle.includes('Classic') || chatTitle.includes('–ö–ª–∞—Å—Å–∏–∫')) {
                    idInfo += `\`CLASSIC_GROUP_ID=${chatId}\`\n`;
                }
                else {
                    idInfo += `–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é\n`;
                }
                await ctx.reply(idInfo, { parse_mode: 'Markdown' });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID:', error);
                await ctx.reply(`Chat ID: ${ctx.chat?.id}\nTopic ID: ${ctx.message?.message_thread_id || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
            }
        });
    }
    setupMessageHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', async (ctx, next) => {
            await this.messageCleaner.handleMessage(ctx);
            return next();
        });
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –≤ –æ–ø—Ä–æ—Å–∞—Ö
        this.bot.on('poll_answer', async (ctx) => {
            try {
                const pollAnswer = ctx.pollAnswer;
                const user = pollAnswer?.user;
                const pollId = pollAnswer?.poll_id;
                const optionIds = pollAnswer?.option_ids;
                if (!pollId || !optionIds || optionIds.length === 0 || !user)
                    return;
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                const pollOptions = (process.env.POLL_OPTIONS || '–Ø –ø—Ä–∏–¥—É,–ú–µ–Ω—è –Ω–µ –±—É–¥–µ—Ç,–Ø –¥—É–º–∞—é,–Ø –æ–ø–∞–∑–¥–∞—é').split(',');
                const selectedOption = pollOptions[optionIds[0]];
                if (!selectedOption)
                    return;
                console.log(`üìä –ì–æ–ª–æ—Å: ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (@${user.username || '–±–µ–∑_username'}) –≤—ã–±—Ä–∞–ª "${selectedOption}" –≤ –æ–ø—Ä–æ—Å–µ ${pollId}`);
                // –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ä–æ—Å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const pollInfo = await this.database.getPollByTelegramId(pollId);
                if (pollInfo) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    await this.database.savePollVote(pollInfo.id, user.id, {
                        username: user.username,
                        first_name: user.first_name,
                        last_name: user.last_name
                    }, selectedOption);
                    console.log(`‚úÖ –ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –≤—ã–±—Ä–∞–ª "${selectedOption}" –≤ –æ–ø—Ä–æ—Å–µ ${pollInfo.pollType}`);
                }
                else {
                    console.log(`‚ö†Ô∏è –û–ø—Ä–æ—Å ${pollId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
                }
            }
            catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
            }
        });
    }
    setupScheduler() {
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–ø—Ä–æ—Å—ã –Ω–∞ 01:00
        const pollTime = process.env.POLL_TIME || '01:00';
        const [hours, minutes] = pollTime.split(':').map(Number);
        // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–æ—Å–æ–≤ –≤ 01:00
        const pollCronPattern = `${minutes} ${hours} * * *`;
        console.log(`üìÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–ø—Ä–æ—Å–æ–≤: ${pollCronPattern} (${process.env.TIMEZONE || 'Europe/Moscow'})`);
        cron.schedule(pollCronPattern, async () => {
            console.log('üïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–æ–≤');
            await this.pollScheduler.sendScheduledPolls();
        }, {
            timezone: process.env.TIMEZONE || 'Europe/Moscow'
        });
        // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å —Å 9:00 –¥–æ 18:00
        const reminderEndTime = process.env.REMINDER_END_TIME || '19:00';
        const reminderEndHour = parseInt(reminderEndTime.split(':')[0]);
        console.log(`üîî –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∫–∞–∂–¥—ã–π —á–∞—Å –¥–æ ${reminderEndHour}:00`);
        // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
        cron.schedule('0 * * * *', async () => {
            const currentHour = new Date().getHours();
            if (currentHour >= 9 && currentHour < reminderEndHour) {
                console.log(`üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ ${currentHour}:00`);
                await this.reminderService.checkAndSendReminders();
            }
        }, {
            timezone: process.env.TIMEZONE || 'Europe/Moscow'
        });
    }
    setupHealthCheck() {
        // –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check –Ω–∞ Render
        const port = process.env.PORT || 3000;
        const server = http.createServer((req, res) => {
            if (req.url === '/health') {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({
                    status: 'ok',
                    timestamp: new Date().toISOString(),
                    uptime: process.uptime()
                }));
            }
            else {
                res.writeHead(404, { 'Content-Type': 'text/plain' });
                res.end('Not Found');
            }
        });
        server.listen(port, () => {
            console.log(`üåê Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        });
    }
    async start() {
        try {
            await this.database.init();
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            await this.bot.launch();
            console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ Render)
            if (process.env.NODE_ENV === 'production') {
                this.keepAliveService.start();
            }
            // Graceful shutdown
            process.once('SIGINT', async () => {
                console.log('‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
                await this.stop();
            });
            process.once('SIGTERM', async () => {
                console.log('‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
                await this.stop();
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
            process.exit(1);
        }
    }
    async stop() {
        try {
            this.bot.stop();
            await this.database.close();
            console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            process.exit(0);
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:', error);
            process.exit(1);
        }
    }
}
// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
const bot = new CityPoolBot();
bot.start();
//# sourceMappingURL=index.js.map